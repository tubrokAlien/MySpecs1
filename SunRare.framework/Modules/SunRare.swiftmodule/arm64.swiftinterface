// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name SunRare
import ARKit
import AVFoundation
import Foundation
import SceneKit
@_exported import SunRare
import Swift
import UIKit
public struct ArtworkModel : Swift.Codable {
  public enum ContentType : Swift.String, Swift.Codable {
    case img
    case gif
    case mp4
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var contentLink: Swift.String
  public var contentType: SunRare.ArtworkModel.ContentType
  public var contentSize: CoreGraphics.CGSize
  public var artworkName: Swift.String
  public var artistName: Swift.String
  public var ownerName: Swift.String
  public var nftLink: Swift.String
  public init(imageLink: Swift.String, contentType: SunRare.ArtworkModel.ContentType, contentSize: CoreGraphics.CGSize, artworkName: Swift.String, artistName: Swift.String, ownerName: Swift.String, nftLink: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension ArtworkModel : Swift.Equatable {
  public static func == (left: SunRare.ArtworkModel, right: SunRare.ArtworkModel) -> Swift.Bool
  public static func != (left: SunRare.ArtworkModel, right: SunRare.ArtworkModel) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class ArtworkMap {
  @objc deinit
}
extension ArtworkMap {
  public static func save(session: ARKit.ARSession, url: Foundation.URL, completion: ((Swift.Error?) -> ())? = nil)
  public static func load(url: Foundation.URL, completion: @escaping (Swift.Error?, ARKit.ARWorldMap?) -> ())
}
extension UIDevice {
  public static var identifier: Swift.String
}
public enum GeneralError : Foundation.LocalizedError {
  case a12Required
  case defaultCameraFailed
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (a: SunRare.GeneralError, b: SunRare.GeneralError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum MapError : Foundation.LocalizedError {
  case nothingToSave
  case sessionRequired
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (a: SunRare.MapError, b: SunRare.MapError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum BindError : Foundation.LocalizedError {
  case alreadyBind
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (a: SunRare.BindError, b: SunRare.BindError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol ARWallArtworkCameraDataSource : AnyObject {
  func arWallArtworkFetchArtworkModel(in vc: UIKit.UIViewController, completion: @escaping (SunRare.ArtworkModel?) -> ())
}
public protocol ARWallArtworkControlDelegate : AnyObject {
  func arWallArtworkControl(_ control: SunRare.ARWallArtworkControl, showCoaching: Swift.Bool)
  func arWallArtworkControl(_ control: SunRare.ARWallArtworkControl, didSelectArtwork model: SunRare.ArtworkModel, placing: Swift.Bool, zoom: Swift.Float)
  func arWallArtworkControlDidUnselectArtwork(_ control: SunRare.ARWallArtworkControl)
}
public protocol ARWallArtworkControlOverlayProvider : AnyObject {
  func arWallArtworkControl(_ control: SunRare.ARWallArtworkControl, updateOverlayFor model: SunRare.ArtworkModel, info: [SunRare.ArtworkSubNodeType : CoreGraphics.CGPoint])
}
public enum ArtworkSubNodeType {
  case artworkPlaceholder
  case link
  case reorder
  case arrow
  case zoom
  public static func == (a: SunRare.ArtworkSubNodeType, b: SunRare.ArtworkSubNodeType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ARWallArtworkControl {
  public struct Configuration {
    public var allowingRaycastTarget: ARKit.ARRaycastQuery.Target
    public var visualizeDetectedPlane: UIKit.UIColor?
    public var overlaySubNodes: Swift.Set<SunRare.ArtworkSubNodeType>
    public var artworkSubNodesContentInfo: [SunRare.ArtworkSubNodeType : Any]
    public var automaticallyCoaching: Swift.Bool
    public var initialWorldMap: ARKit.ARWorldMap?
    public init()
  }
  public static func isDeviceSupported() -> Swift.Bool
  public static func requestCameraAccess(completion: @escaping (Swift.Bool) -> ())
  public static func presentDefaultARCameraScreen(configuration: SunRare.DefaultARCameraConfiguration, datasource: SunRare.ARWallArtworkCameraDataSource?, in vc: UIKit.UIViewController) throws
}
public struct DefaultARCameraConfiguration {
  public var worldMapLoadURL: Foundation.URL?
  public var worldMapSaveURL: Foundation.URL?
  public init()
}
@objc @_inheritsConvenienceInitializers public class ARWallArtworkControl : ObjectiveC.NSObject {
  weak public var delegate: SunRare.ARWallArtworkControlDelegate?
  weak public var overlayProvider: SunRare.ARWallArtworkControlOverlayProvider?
  @objc override dynamic public init()
  @objc deinit
}
extension ARWallArtworkControl {
  public func bindToARScene(_ sceneView: ARKit.ARSCNView, config: SunRare.ARWallArtworkControl.Configuration = Configuration()) throws
  public func unbind()
  public func addActiveNode()
  public func removeActiveNode()
  public func placeNewArtwork(model: SunRare.ArtworkModel)
  public func reorderArtwork(model: SunRare.ArtworkModel)
  public func snapshot() -> (image: UIKit.UIImage, model: SunRare.ArtworkModel?)?
  public func zoomSelectedArtwork(perc: Swift.Float)
  public func saveScene(url: Foundation.URL, completion: ((Swift.Error?) -> ())? = nil)
}
extension ARWallArtworkControl : ARKit.ARSCNViewDelegate {
  @objc dynamic public func renderer(_ renderer: SceneKit.SCNSceneRenderer, nodeFor anchor: ARKit.ARAnchor) -> SceneKit.SCNNode?
  @objc dynamic public func renderer(_ renderer: SceneKit.SCNSceneRenderer, didAdd node: SceneKit.SCNNode, for anchor: ARKit.ARAnchor)
  @objc dynamic public func renderer(_ renderer: SceneKit.SCNSceneRenderer, didUpdate node: SceneKit.SCNNode, for anchor: ARKit.ARAnchor)
  @objc dynamic public func renderer(_ renderer: SceneKit.SCNSceneRenderer, updateAtTime time: Foundation.TimeInterval)
}
extension ARWallArtworkControl : ARKit.ARCoachingOverlayViewDelegate {
  @objc dynamic public func coachingOverlayViewWillActivate(_ coachingOverlayView: ARKit.ARCoachingOverlayView)
  @objc dynamic public func coachingOverlayViewDidDeactivate(_ coachingOverlayView: ARKit.ARCoachingOverlayView)
}
